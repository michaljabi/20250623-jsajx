/**
 * a30-scope-of-code
 * Explain
 *
 * #Cel:
 * Poznanie sposobu dziaÅ‚ania zakresÃ³w w JavaScript.
 * JeÅ›li dana zmienna / staÅ‚a nie jest znaleziona w inner scope, przeszukiwane sÄ… kolejne zakresy na zewnÄ…trz,
 * aÅ¼ do samego zakresu globalnego
 */

/*

	W JavaScript bardzo waÅ¼nÄ… rolÄ™ odgrywajÄ… tzw. zasiÄ™gi - SCOPE

	Chodzi o to Å¼e funkcja ma dostÄ™p do tego co jest "na zewnÄ…trz niej"
	bÄ™dziemy to nazywaÄ‡ "outer scope"

	Pozwala nam to na wykorzystanie wartoÅ›ci, ktÃ³re zdefiniowane sÄ… poza funkcjÄ….

	ZasiÄ™g na "samym szczycie" nazywany jest tzw. Global Scope
	Jednak wiemy, Å¼e w Node.js kaÅ¼dy plik ma wÅ‚asny zakres - wiÄ™c nazywanie go "globalnym"
	jest technicznie delikatnym naduÅ¼yciem. MoÅ¼na jednak mÃ³wiÄ‡ o globalnym zakresie moduÅ‚u.

	Faktyczny zasiÄ™g globalny w caÅ‚ym Node.js osiÄ…gamy odwoÅ‚ujÄ…c siÄ™ do obiektu:
	global

	Dla przypomnienia w przeglÄ…darce to: window
*/

// a) Module Global SCOPE
const model = 'Q2'

function mySuperCar () {
	// b) local SCOPE of (mySuperCar)

	function getName() {
		return 'Audi'
	}

	console.log('Moje super auto to:')
	console.log(getName())
	console.log(model)
}

mySuperCar();

// PrzykÅ‚ad powyÅ¼ej pokazuje, Å¼e mamy dostÄ™p do zewnÄ™trznej wartoÅ›ci.
// Pytanie nr1. ok, to co siÄ™ stanie, jeÅ›li zagnieÅ¼dÅ¼eÅ„ jest wiÄ™cej
// Dla szybkiego wykonania przykÅ‚adu â€” wykorzystamy IFEE:



// Dla porzÄ…dku: kaÅ¼da z tych funkcji mogÅ‚aby byÄ‡ anonimowa (nienazwana).
// tutaj jest to zrobione, aby Å‚atwiej byÅ‚o okreÅ›liÄ‡, gdzie siÄ™ znajdujemy.
// W rzeczywistym kodzie raczej nie spotkamy takich konstrukcji (ğŸ˜…).
// SÅ‚uÅ¼y ona wyÅ‚Ä…czenie sprawdzeniu, jak zachowuje siÄ™ przeszukiwanie scope w JS.
const myColor = 'red';
(function inception() {
	const myColor = 'cristal';

	(function secondDream() {
		const myColor = 'sapphire';

		(function thirdDream() {
			const myColor = 'emerald';

			(function fourthDream() {
				const myColor = 'diamond';
				// komentuj po kolei idÄ…c z tego scope odwoÅ‚anie do staÅ‚em myColor - aby zobaczyÄ‡ jak bÄ™dzie siÄ™ zachowywaÄ‡
				console.log(myColor);
			})()
		})();
	})();
})();

// PrzykÅ‚ad powyÅ¼ej ukazuje jak JavaScript przeszukuje outer-scope jeÅ›li nie znajdzie lokalnej zmiennej lub staÅ‚ej,
// o ktÃ³rÄ… prosimy.

// ZauwaÅ¼ Å¼e pokazana jest rÃ³wnieÅ¼ inna sprawa
// To tzw. shadowing variable.
// Chodzi o to Å¼e jeÅ›li zmienna w naszym scope nazywa siÄ™ tak samo jak zmienna z outer-scope.
// Wtedy nie mamy moÅ¼liwoÅ›ci siÄ™ do niej odwoÅ‚aÄ‡

const myVariable = 123;

function sample() {
	const myVariable = 'Hello';
	console.log(myVariable);
	// Nie mam jak dostaÄ‡ siÄ™ do outer scope
	// MusiaÅ‚bym zmieniÄ‡ nazwÄ™ lokalnej zmiennej.

	// Jedno z poÅ›rednich rozwiÄ…zaÅ„ jak odnaleÅºÄ‡ takie miejsca w kodzie:
	// ESLint - Linter do JavaScript
	// https://eslint.org/
	// i jego reguÅ‚a: no-shadow
	// https://eslint.org/docs/rules/no-shadow
}

sample();


// DANGER ZONE:
// O tym jeszcze bÄ™dzie mowa, jednak moÅ¼na zupeÅ‚nie przypadkowo zadeklarowaÄ‡ zmiennÄ… w global scope:
function findMyNewMug() {
	// "use strict"; // odkomentuj w odpowiednim momencie
	myMug = 'Moss sticker attached to bottom.'
	// Zmienna myMug nie byÅ‚a zadeklarowana w outer scope...
	// Co za tym idzie nie powinniÅ›my mieÄ‡ moÅ¼liwoÅ›ci jej nadpisania,
	// Jednak co siÄ™ okazuje:
	console.log(myMug);
	// kod dziaÅ‚a
}
findMyNewMug();

// To czego siÄ™ nie spodziewaliÅ›my, to miejsce.
// Gdzie teraz mieszka zmienna "myMug" ???

// Wydaje siÄ™ Å¼e nie wyciekÅ‚a do outer scope!
// Na pewno jest lokalna...

// Jednak, rzeczywistoÅ›Ä‡ jest inna:
console.log(myMug);
// myMug, to teraz zmienna globalna:
console.log(global.myMug);

// Jedyne o czym zapomnieliÅ›my to sÅ‚owo kluczowe, let albo const, w Å›rodku funkcji findMyNewMug
// Jak siÄ™ przed tym broniÄ‡ ?!

// uÅ¼ywajÄ…c tzw. strict mode dla JavaScript.
// wystarczy go dopisaÄ‡ na poczÄ…tku tego pliku lub nawet jako pierwsza linia w Å›rodku findMyNewMug
// jako:
// "use strict";
