import { assertThat } from '../../j4b1-assert.js'
/**
 * c10-immutability
 * Explain
 *
 * #Cel:
 * Niemutowanie danych wejÅ›ciowych, lub istniejÄ…cych danych w pamiÄ™ci - okazuje siÄ™ kluczowe w pewnych momentach dziaÅ‚ania naszej aplikacji.
 * Dotyczy to na przykÅ‚ad stanu, gdzie nie chcemy np. po przefiltrowaniu listy danych - zostawiÄ‡ ich w tej "okrojonej" formie.
 * RÃ³wnieÅ¼ piszÄ…c funkcje i metody w aplikacji - nie chcemy naruszaÄ‡ danych wejÅ›ciowych (argumentÃ³w),
 * tak aby nasz kod zachowywaÅ‚ siÄ™ przewidywalnie.
 */

// Niemutowanie danych - to pewna koncepcja.
// Sprawdza siÄ™ ona np. podczas utrzymywania stanu aplikacji - pytanie tylko: dlaczego ?

// Zacznijmy od poczÄ…tku ğŸ˜€

// Najpierw wyjaÅ›nimy sobie w jakich okolicznoÅ›ciach mutowanie danych jest zÅ‚e:

// PrzykÅ‚ad 1:
// Funkcja ktÃ³ra dodaje wykrzyknik do kaÅ¼dego zdania:
function addBang(sentence) {
	return sentence + '!';
}

const mySentence = 'Hello World';
const otherSentence = addBang(mySentence);

assertThat(
	'otherSentence should have exclamation sign on the end',
	expect => expect(otherSentence).toBe('Hello World!')
); //=
assertThat(
	'mySentence should stay intact',
	expect => expect(mySentence).toBe('Hello World')
); //=
assertThat(
	'both sentences should not be the same',
	expect => expect(mySentence).notToBe(otherSentence)
); //=

// Tutaj nie nastÄ™puje mutacja ?!
// DokÅ‚adnie, dzieje siÄ™ tak dlatego - Å¼e nie da sie "mutowaÄ‡" typÃ³w prostych (primitive types)
// SÄ… one przekazywane przez wartoÅ›ci

// PrzykÅ‚ad 1 - ten wÅ‚aÅ›ciwy
// O Mutowaniu mÃ³wmy w momencie, w ktÃ³rym mamy do dyspozycji przekazywanie danych przez tzw. referencjÄ™
// Przypomnij sobie informacjÄ™ zawarte w ../B-objectivity/b40-cloning-example.js
// Delikatnie zmieniajÄ…c przykÅ‚ad - moÅ¼emy juÅ¼ zauwaÅ¼yÄ‡ mutacjÄ™:

function addBangToWord(objectWithWord) {
	objectWithWord.word += '!';
	return objectWithWord;
}

const myObject = { word: 'Hello' };
// teraz wywoÅ‚anie:
const myOtherObject = addBangToWord(myObject);

// Sprawdzenie czy pokazujÄ… na to samo miejsce w pamiÄ™ci:
console.log(myObject === myOtherObject);
// Podejrzenie czy mamy mutacjÄ™:
console.log(myObject);
console.log(myOtherObject);

// Niestety obiekt `myObject` oraz `myOtherObject` - to to samo miejsce w pamiÄ™ci.
// Dzieje siÄ™ tak dlatego - Å¼e w Å›rodku naszej funkcji `addBangToWord`
// OdczytaliÅ›my pole z referencji do obiektu i dodaliÅ›my do niego dane.

// ZauwaÅ¼, Å¼e w tym kontekÅ›cie nasza funkcja addBangToWord zachowuje siÄ™ "niedeterministycznie".
// Nie do koÅ„ca moÅ¼emy chcieÄ‡ aby po wrzuceniu do niej argumentu - zostaÅ‚ on modyfikowany.
// Lepiej Å¼eby funkcja zwrÃ³ciÅ‚a wynik jako nowy obiekt ze sÅ‚owem i wykrzyknikiem.

// Poprawiamy implementacjÄ™:

function nonMutatingAddBangToWord(objectWithWord) {
	return {
		...objectWithWord,
		word: objectWithWord.word + '!'
	};
}

const myObject2 = { word: 'Hello' };
// teraz wywoÅ‚anie:
const myOtherObject2 = nonMutatingAddBangToWord(myObject2);

// Sprawdzenie czy pokazujÄ… na to samo miejsce w pamiÄ™ci:
console.log(myObject2 === myOtherObject2);
// Podejrzenie czy mamy mutacjÄ™:
console.log(myObject2);
console.log(myOtherObject2);


// Teraz wszystko zachowuje siÄ™ przewidywalne.
// Nie mutujemy przekazanych danych.


// Oto wiÄ™c - nasza #1 motywacja do "niemutowania" danych.


// O co chodzi jednak ze stanem danych ?
// Tutaj musimy sobie wyobraziÄ‡ stan danych jako obiekt - drzewo np.:

const myCoffeeState = {
	coffeeBeans: ['Arabica', 'Robusta'],
	coffeeMachine: {
		water: 200,
		coffee: 300,
		status: 'AWAITING',
		groundContainer: {
			status: 'EMPTY'
		}
	},
}

// Przypomnij sobie problem z zadania: ./b40-3rd-cloning-challenge.js

// W aplikacji bÄ™dziemy chcieli modyfikowaÄ‡ stan danych, zmieniaÄ‡ go.
// Jednak jeÅ›li bÄ™dziemy to robiÄ‡ bezpoÅ›rednio na obiekcie - to jak zorientujemy siÄ™ czy cokolwiek zostaÅ‚o zmienione ?

// Innymi sÅ‚owy - co by byÅ‚o jakbyÅ›my potrzebowali informacji - co siÄ™ zmieniÅ‚o?
// Wydaje siÄ™ to byÄ‡ proste - przecieÅ¼ moÅ¼emy dorobiÄ‡ odpowiedni mechanizm obserwowania zmian.
// Jednak na dÅ‚uÅ¼Ä… metÄ™ z bardziej skomplikowanym drzewem stanu - okaÅ¼e siÄ™, Å¼e musimy sprawdzaÄ‡ "gaÅ‚Ä…Åº po gaÅ‚Ä™zi"
// co siÄ™ zmieniÅ‚o...

// To bÄ™dzie bardzo kosztowne. Czy nie daÅ‚oby siÄ™ Å‚atwiej okreÅ›liÄ‡ do siÄ™ zmieniÅ‚o ?

// Da siÄ™, za pomocÄ… !==
// Wystarczy tylko - Å¼ebyÅ›my zamiast mutacji - obiekty zagnieÅ¼dÅ¼one w stanie - zastÄ™powali nowymi.

// Oto wiÄ™c powstaje - nasza #2 motywacja do "niemutowania" danych.
// JeÅ›li chcemy wiedzieÄ‡ co zmieniÅ‚o siÄ™ na drzewie danych.

// Rozpatrzmy mutujÄ…cÄ… zmianÄ™ stanu groundContainer na status: FULL

// RÄ˜CZNA, ZMIANA STANU (tutaj moÅ¼emy wyobraziÄ‡ sobie jakÄ…Å› akcjÄ™):
const changedState = myCoffeeState;
const previousGroundContainer = myCoffeeState.coffeeMachine.groundContainer;
changedState.coffeeMachine.groundContainer.status = 'FULL';
const activeGroundContainer = changedState.coffeeMachine.groundContainer;
console.log(activeGroundContainer.status)

// Programistyczne nie wiemy o zmianie:
console.log(
	previousGroundContainer !== activeGroundContainer
)

// Teraz wiemy co siÄ™ zmieniÅ‚o jeÅ›li widzimy to z tej strony.
// Jednak komponent prezentujÄ…cy na widoku dane z groundContainer - nie odÅ›wieÅ¼y siÄ™.
// MoÅ¼emy to rozwiÄ…zaÄ‡ - kosztownie:
//  a) odÅ›wieÅ¼ajÄ…c wszystkie komponenty - kaÅ¼dy dostanie informacje o tym Å¼e ma siÄ™ re-renderowaÄ‡ !
//  b) sprawdzajÄ…c rÄ™cznie, pole po polu co zmieniÅ‚o siÄ™ na drzewie stanu...

// Obydwa te wyjÅ›cia bÄ™dÄ… kosztowne.
// a) - niewydajne przeliczanie i przerysowywanie aplikacji
// b) - pÃ³ki drzewo stanu jest maÅ‚e - nie ma problemu, jednak jeÅ›li siÄ™ rozwinie (wiÄ™ksze aplikacje),
//      porÃ³wnywanie kaÅ¼dej wartoÅ›ci pole po polu - dostanie zadyszki

// Rozpatrzmy teraz takÄ… samÄ… zmianÄ™ stanu bez mutowania czÄ™Å›ci stanu:
const changedStateAgain = myCoffeeState;
const previousGroundContainer2 = myCoffeeState.coffeeMachine.groundContainer;
changedStateAgain.coffeeMachine.groundContainer = {...previousGroundContainer2, status: 'ALMOST_FULL'};
const activeGroundContainer2 = changedStateAgain.coffeeMachine.groundContainer;
console.log(activeGroundContainer2.status)

// Programistyczne (WOW) Wiemy co siÄ™ zmieniÅ‚o:
console.log(
	previousGroundContainer2 !== activeGroundContainer2
)

// MoÅ¼emy dziÄ™ki temu zapisywaÄ‡ akcje zmiany stanu i wycinki stanu,
// RobiÄ‡ time travel debugging
// I zapisywaÄ‡ "logi" naszych zdarzeÅ„
// Finalnie pozwala nam to "odbudowywaÄ‡" stan aplikacji.
