/**
 * a10-the-need-of-modularity
 * Explain
 *
 * #Cel:
 * Zrozumienie potrzeby dodania moduÅ‚owej budowy do budowanych dziÄ™ki JS skryptÃ³w.
 * SieÄ‡ zaczyna siÄ™ zmieniaÄ‡ z kierunku "jedynie stron internetowych" na kierunek "stron i aplikacji webowych"
 * W takim ukÅ‚adzie JS dostaje 'zadyszki' - moÅ¼emy go z politowaniem traktowaÄ‡ jako narzÄ™dzie do walidacji formularzy
 * Potrzeba sposobu radzenia sobie z duÅ¼Ä… iloÅ›ciÄ… kodu, z podziaÅ‚em kodu - z implementacjÄ… jakiejÅ› architektury itd.
 * */

// SposÃ³b doÅ‚Ä…czania skryptÃ³w do strony .html powoduje pewne niedogodnoÅ›ci.
// Nie moÅ¼emy poprawnie podzieliÄ‡ swojego kodu na mniejsze czÄ™Å›ci... a przynajmniej graniczy to z cudem
// CaÅ‚y problem, leÅ¼y w mechanice doÅ‚Ä…czania skryptÃ³w. Przypomnij sobie skÅ‚adnie:
/*
```html

		....
		<script src="../side-script.js"></script>
		<script src="../main-script.js"></script>
		<script>
				var myVariable = 800;
		</script>

		</body>
```
*/
// Posiadamy tutaj kilka problemÃ³w:
/*
	* jeÅ›li w plikach `side-script.js` i/lub `main-script.js` istnieje zmienna myVariable - to wÅ‚aÅ›nie zostaÅ‚a zmieniona / nadpisana.
	* mamy dostÄ™p do wszystkich zmiennych i funkcji umieszczonych w najwyÅ¼szym scope dla tych plikÃ³w (local scope)
	* wszystkie dane w pikach - mieszajÄ… siÄ™
	* nie mamy pewnoÅ›ci czy dana zmienna istnieje juÅ¼ w naszym scope - poniewaÅ¼ nie wiadomo czy plik, ktÃ³ry jÄ… zawiera dalej jest doÅ‚Ä…czany do strony itp. itd.
*/
/*
	# Przypomnienie:
	PamiÄ™taj Å¼e w natywnym podejÅ›ciu przed ES6 (rok 2015) nie jest moÅ¼liwe dodawanie skryptÃ³w z wnÄ™trza innego skryptu.
	Wszystko musi byÄ‡ doÅ‚Ä…czone jako <script src=""> w pliku .html ze stronÄ….
*/


// Natywnie, wykorzystujÄ…c Vanilla.js - programiÅ›ci zaczynajÄ… radziÄ‡ sobie z problemem, korzystajÄ…c z 2 gÅ‚Ã³wnych technik:
// a) namespacing
// b) IIFE - Immediately Invoked Function Expression

// AD. a) Namespacing:
var myCaffeineLib = {
	assets: ['beans', 'milk', 'more beans', 'maple syrup'],
	makeMeCoffee: function () {

	},
	laboratory: {
		newTaste: {},
		makeSample: function() {
			return 'Sample dark coffee'
		}
	}
};
// Teraz wykorzystanie nowej "biblioteki" to kwestia dostÄ™pu do odpowiednich pÃ³l:
myCaffeineLib.laboratory.makeSample(); //=


// AD. b) IIFE:
// IIFE - Immediately Invoked Function Expression (@see: https://developer.mozilla.org/en-US/docs/Glossary/IIFE)
(function(){
	var iAmHermetic = 'some value to print';

	console.log(iAmHermetic);
}())

// Poza IIFE nie mamy dostÄ™pu do zawartoÅ›ci iAmHermetic:
// console.log(iAmHermetic);


// -----------------------------
// PÃ³Åºniej - w latach 2009-2010 pojawiajÄ… siÄ™ nowe koncepcje moduÅ‚owoÅ›ci JavaScript'u:
// c) AMD - Asynchronous Module Definition
// d) CommonJS


// AD. c) AMD:
// NajpopularniejszÄ… bibliotekÄ… oferujÄ…cÄ… AMD jest zrobiony przez James'a Burke - require.js
// https://requirejs.org/

// Koncepcja jest prosta:
// UÅ¼ywasz w JS loadera do skryptÃ³w na stronie WWW. Loader ten posiada wiedzÄ™ o tym gdzie znajdujÄ… siÄ™ skrypty
// WywoÅ‚ujÄ…c specjalnÄ… funkcjÄ™ z callbackiem - moÅ¼emy poprosiÄ‡ o "zaleÅ¼noÅ›ci" (dependencies) naszej logiki


// AD. d) CommonJS:
// juÅ¼ w 2009 roku Ryan Dahl wypuÅ›ciÅ‚ pierwszÄ… wersjÄ™ swojej idei CommonJS - gdzie to Å›rodowisko uruchomieniowe
// wyjÄ™te z Chromium (interpreter V8) zostaje obudowane aplikacjÄ… w C++ i powstaje "Server Side JavaScript"
// https://nodejs.org/en/

// RozwiÄ…zanie na miarÄ™ 2020+:
// Aktualnie Node.js zostaje "zaprzÄ™gniÄ™ty" - do budowania front-endu.
// Dodatkowo rozwiÄ…zania typu Bundlery lub Babel.js - pozwalajÄ… na uÅ¼ywanie skÅ‚adni ES6 - importÃ³w.
// Pozwala to na duÅ¼Ä… eleastycznoÅ›Ä‡. MoÅ¼emy jednoczeÅ›nie uÅ¼ywaÄ‡ skÅ‚adni ES6 modules - dla front-endu i back-endu.
// Dodatkowo bundlery majÄ… wbudowanÄ… obsÅ‚ugÄ™ importÃ³w ze skÅ‚adni ES6 (rozumiejÄ… te skÅ‚adniÄ™)

// W aktualnej wersji node 22.x LTS â€” jest moÅ¼liwoÅ›Ä‡ uÅ¼ycia specjalnej zmiennej do konfiguracji w extensions.json
// JeÅ›li ustawimy:
// "type":"module"
// MoÅ¼emy w plikach .js uÅ¼ywaÄ‡ skÅ‚adni ES6 Modules.
// czyli: import / export zamiast: require('') oraz module.exports = {} !
// Z tej zaleÅ¼noÅ›ci korzystajÄ… przykÅ‚ady zrobione tutaj :)


// Inne runtime JavaScript (z automatu obsÅ‚ugujÄ…ce moduÅ‚y): Deno ğŸ¦•
// "The next-generation JavaScript runtime"
// TwÃ³rca Node.js - Ryan Dahl, wystartowaÅ‚ z nowym projektem
// https://deno.land/
// Deno jest napisane w TypeScript i posiada wbudowanÄ… obsÅ‚ugÄ™ moduÅ‚Ã³w ES6.
// Dodatkowo posiada wbudowany system uprawnieÅ„ do plikÃ³w, sieci i Å›rodowiska.

// Dodatkowo inny runtime JavaScript - Bun ğŸ§…
// "A fast all-in-one JavaScript runtime"
// https://bun.sh/
// Bun jest napisane w Zig i jest zoptymalizowane pod kÄ…tem wydajnoÅ›ci.
// Bun obsÅ‚uguje moduÅ‚y ES6 i jest kompatybilne z Node.js, ale ma swoje wÅ‚asne podejÅ›cie do zarzÄ…dzania pakietami i zaleÅ¼noÅ›ciami.

